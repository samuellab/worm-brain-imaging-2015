function varargout = field_deform_ND(input, u, varargin)
% output = field_deform(input, u, varargin)
%
%  deforms the input according to the vectors specified by u.  
%  If u is an Mx2 cell array of N-tuples (where N is the dimension of the
%  input image), those pairs are used to generate the deformation field.
%
% [output, u] = field_deform(input, u, varargin)
%
%  additionally returns the deformation field used (either u or the field
%  generated by the list of points in d)
%
% This process should preserve the normalization of the image (except near
% the edges)

N = ndims1(input);
siz = size(input);

default_options = struct(...
                        'direction', 1 ...
                        );
input_options = varargin2struct(varargin{:}); 
options = mergestruct(default_options, input_options);


% handle the case where u is a set of reference points
if size(u,2) == 2
    u = field_from_displacements(u, size(input));
end


output = zeros(size(input), class(input));

for i = 1:numel(input)
    
    old_coords = cell(1,N);
    [old_coords{:}] = ind2sub(siz,i);
    old_val = input(old_coords{:});
    
    new_coords = nan(1,N);
    for j = 1:N
        new_coords(j) = old_coords{j} + options.direction * u{i}(j);
    end
    
    new_coords_whole = floor(new_coords);
    new_coords_frac = mod(new_coords, 1);
    
    % proportionally smear the new data over a 2^N hyperpixel 
    % to ensure the result looks good while preserving intensity
    for j = 1 : 2^N
        idx = cell(1,N);
        [idx{:}] = ind2sub(2*ones(1,N), j);
        idx = cell2mat(idx) - 1; % 0-indexed coords on [0, 1]^N
        
        weight = 1;
        for k = 1:N
            weight = weight * new_coords_frac(k)^(idx(k)) * ...
                              (1-new_coords_frac(k))^(1-idx(k));
        end
        
        new_val = weight * old_val;
                
        idx = new_coords_whole + idx;
        
        if all(idx>=1) && all(idx<=siz)
           idx = num2cell(idx);
           output(idx{:}) = output(idx{:}) + new_val;
        end
            
    end

end

varargout{1} = output;
varargout{2} = u;