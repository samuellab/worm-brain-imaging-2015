classdef Measurement
    %MEASUREMENT  Methods to access time series data from an animal.

    properties (SetAccess=protected)

        UUID

        Name

        Strain

        % This is a dummy timeseries that provides time values for the
        % image channels, which can't be put in a standard timeseries due
        % to the use of custom arrays.
        ImageTimeSeries

        % This is a cell array of image arrays with identical last
        % dimension. These are read only.
        ImageChannels

        % This is an cell array of independent time series objects.
        DataChannels

    end

    methods

        function this = Measurement(uuid, name, strain, ...
                imagetimeseries, imagechannels, datachannels)
            % obj = MEASUREMENT(uuid, name, strain, imagetimeseries, ...
            %     imagechannels, datachannels)
            % 
            %   Creates a measurement object by directly populating data.
            %   This will typically be called by a separate static method
            %   to construct objects.

            this.UUID = uuid;
            this.Name = name;
            this.Strain = strain;
            this.ImageTimeSeries = imagetimeseries;
            this.ImageChannels = imagechannels;
            this.DataChannels = datachannels;

        end

        % Create a folder with tiff stacks for each time point, numbered
        % T_00034.tif
        to_tif_stacks(this, location, channel, varargin)

        % Create an hdf5 archive of the dataset
        to_archive(this, filename)

        function y = size_T(this)
            % y = obj.SIZE_T()
            %
            %   Return the size of the time dimension.
            y = length(this.ImageTimeSeries(1).Time);
        end

        function y = size_C(this)
            % y = obj.SIZE_C()
            %
            %   Return the number of channels.
            y = length(this.ImageTimeSeries);
        end

        function vol = get_vol(this, c, t)
            % vol = obj.GET_VOL(channel, time)
            %
            %   Returns a volume corresponding to channel c at time point
            %   t. 
            vol = this.ImageChannels{c}(:,:,:,t);
        end

        function idx = get_channel_idx(this, channel_name)
            % idx = obj.GET_CHANNEL_IDX(channel_name)
            %
            %   Return the channel index corresponding to a given channel
            %   name.

            idx = 0;

            for c = 1:this.size_C()
                if strcmp(this.ImageTimeSeries(c).Name, channel_name)
                    idx = c;
                end
            end

        end

        function name = get_channel_name(this, channel_idx)
            % name = obj.GET_CHANNEL_NAME(channel_idx)
            %
            %   Returns the name of a channel with a given index.
            name = this.ImageTimeSeries(channel_idx).Name;
        end

    end

    methods (Static)

        % Create a measurement object from a single matfile generated by
        % the microscope using additional parameters specified parameters.
        this = from_raw_matfile(filename, metadata_filename)

    end

end